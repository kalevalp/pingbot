service: pingbot

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1
  environment:
    DYNAMODB_NAMESPACE: ${opt:stage, "dev"}
    WATCHTOWER_EVENT_KINESIS_STREAM:
      Ref: EventsStream
    DEBUG_WATCHTOWER: 1
    # PROFILE_WATCHTOWER: 1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'kinesis:DescribeStream'
        - 'kinesis:PutRecord'
        - 'kinesis:PutRecords'
      Resource:
        Fn::GetAtt: [EventsStream, Arn]

package:
  exclude:
    - README.md
    - LICENSE
    - res/

custom:
  # handlerFilePostfix: '-wrapper'
  # handlerFilePostfix: ''
  handlerFilePostfix: ${env:WT_RUN_NO_RECORDING, '-wrapper'}
  wtPathPrefix: "src/"

stepFunctions:
  stateMachines:
    checker: ${file(${self:custom.wtPathPrefix}watchtower/stateMachine.yml):stateMachines.checker}

plugins:
  - serverless-step-functions

functions:
  PingbotLambdaDispatcher:
    name: pingbot-dispatcher
    handler: src/pingbot-dispatcher${self:custom.handlerFilePostfix}.handler
    description : "Function to fetch check targets from DynamoDB table and invoke the health check function"
    memorySize: 1024
    timeout: 60
    role:
      'Fn::GetAtt': [ PingbotDispatcherLambdaRole, Arn ]
    events:
      - schedule: rate(1 minute)

  PingbotLambdaHealthChecker:
    name: pingbot-health-checker
    handler: src/pingbot-health-checker${self:custom.handlerFilePostfix}.handler
    description : "Function to make an HTTP/HTTPS request and save result to DynamoDB table"
    memorySize: 1024
    timeout: 55
    role:
      'Fn::GetAtt': [ PingbotLambdaRole, Arn ]

  PingbotLambdaResultProcessor:
    name: pingbot-result-processor
    handler: src/pingbot-result-processor${self:custom.handlerFilePostfix}.handler
    description : "Function to handle the check status changes (invokes notifiers, persists status history)"
    memorySize: 1024
    timeout: 50
    role:
      'Fn::GetAtt': [ PingbotStreamLambdaRole, Arn ]
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [PingbotResults, StreamArn]

  PingbotLambdaSlackNotifier:
    name: pingbot-slack-notifier
    handler: src/pingbot-slack-notifier${self:custom.handlerFilePostfix}.handler
    description : "Function to notify the check status changes"
    memorySize: 1024
    timeout: 50
    role:
      'Fn::GetAtt': [ PingbotLambdaRole, Arn ]

  PingbotLambdaAddMonitoredURL:
    name: pingbot-add-url
    handler: src/pingbot-add-url${self:custom.handlerFilePostfix}.handler
    description : "Function to add a URL to be pinged"
    memorySize: 1024
    timeout: 6
    role:
      'Fn::GetAtt': [ PingbotLambdaRole, Arn ]
    events:
      - http:
          path: addurl
          method: post
          cors: true

  PingbotLambdaRemoveMonitoredURL:
    name: pingbot-remove-url
    handler: src/pingbot-remove-url${self:custom.handlerFilePostfix}.handler
    description : "Function to remove a URL to be pinged"
    memorySize: 1024
    timeout: 6
    role:
      'Fn::GetAtt': [ PingbotLambdaRole, Arn ]
    events:
      - http:
          path: removeurl
          method: delete
          cors: true


  ########################################
  ## Watchtower Functions
  ##
  watchtower-ingestion: ${file(${self:custom.wtPathPrefix}watchtower/functions.yml):watchtower-ingestion}   # Event ingestion function
  watchtower-monitor:   ${file(${self:custom.wtPathPrefix}watchtower/functions.yml):watchtower-monitor}     # Event monitor
  wt-monitor-trigger:   ${file(${self:custom.wtPathPrefix}watchtower/functions.yml):wt-monitor-trigger}     # A function that triggers the event monitoring step-functions state machine
  ##
  ## END of Watchtower Functions
  ########################################

resources:
  Resources:
    PingbotTargets:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: pingbot-targets
        AttributeDefinitions:
          - AttributeName: uuid
            AttributeType: S
        KeySchema:
          - AttributeName: uuid
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 10
    PingbotResults:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName : pingbot-results
        AttributeDefinitions:
          - AttributeName: uuid
            AttributeType: S
        KeySchema:
          - AttributeName: uuid
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 10
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    PingbotDispatcherLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
          - Effect: "Allow"
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
        Path: /
        # Path: "/pingbot/",
        Policies:
          - PolicyName: LambdaFunctionPolicy
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource:
                    - arn:aws:logs:*:*:*
                - Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: # "*"
                    - Fn::GetAtt: [PingbotLambdaHealthCheckerLambdaFunction, Arn]
                    - Fn::GetAtt: [PingbotLambdaSlackNotifierLambdaFunction, Arn]
                - Effect: Allow
                  Action:
                    - "dynamodb:GetItem"
                    - "dynamodb:PutItem"
                    - "dynamodb:Scan"
                  Resource:
                    - Fn::GetAtt: [PingbotTargets, Arn]
                    - Fn::GetAtt: [PingbotResults, Arn]
                - Effect: Allow
                  Action:
                    - 'kinesis:DescribeStream'
                    - 'kinesis:PutRecord'
                    - 'kinesis:PutRecords'
                  Resource:
                    Fn::GetAtt: [EventsStream, Arn]

    PingbotStreamLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
          - Effect: "Allow"
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
        Path: /
        # Path: "/pingbot/",
        Policies:
          - PolicyName: LambdaFunctionPolicy
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource:
                    - arn:aws:logs:*:*:*
                - Effect: Allow
                  Action:
                    - "dynamodb:GetItem"
                    - "dynamodb:PutItem"
                    - "dynamodb:Scan"
                  Resource:
                    - Fn::GetAtt: [PingbotTargets, Arn]
                    - Fn::GetAtt: [PingbotResults, Arn]
                - Effect: Allow
                  Action:
                    - "dynamodb:DescribeStream"
                    - "dynamodb:GetRecords"
                    - "dynamodb:GetShardIterator"
                    - "dynamodb:ListStreams"
                  Resource:
                    - Fn::GetAtt: [PingbotResults, StreamArn]
                - Effect: Allow
                  Action:
                    - 'kinesis:DescribeStream'
                    - 'kinesis:PutRecord'
                    - 'kinesis:PutRecords'
                  Resource:
                    Fn::GetAtt: [EventsStream, Arn]
    PingbotLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
          - Effect: "Allow"
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
        Path: /
        # Path: "/pingbot/",
        Policies:
          - PolicyName: LambdaFunctionPolicy
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource:
                    - arn:aws:logs:*:*:*
                - Effect: Allow
                  Action:
                    - "dynamodb:GetItem"
                    - "dynamodb:PutItem"
                    - "dynamodb:Scan"
                    - "dynamodb:DeleteItem"
                  Resource:
                    - Fn::GetAtt: [PingbotTargets, Arn]
                    - Fn::GetAtt: [PingbotResults, Arn]
                - Effect: Allow
                  Action:
                    - 'kinesis:DescribeStream'
                    - 'kinesis:PutRecord'
                    - 'kinesis:PutRecords'
                  Resource:
                    Fn::GetAtt: [EventsStream, Arn]

    ########################################
    ## Watchtower Resources
    ##
    EventsTable:          ${file(${self:custom.wtPathPrefix}watchtower/ddbTables.yml):Resources.EventsTable}
    CheckpointsTable:     ${file(${self:custom.wtPathPrefix}watchtower/ddbTables.yml):Resources.CheckpointsTable}
    InvocationStream:     ${file(${self:custom.wtPathPrefix}watchtower/kinesisStreams.yml):Resources.InvocationStream}
    EventsStream:         ${file(${self:custom.wtPathPrefix}watchtower/kinesisStreams.yml):Resources.EventsStream}
    EventWriterRole:      ${file(${self:custom.wtPathPrefix}watchtower/iamRoles.yml):Resources.EventWriterRole}
    EventReaderRole:      ${file(${self:custom.wtPathPrefix}watchtower/iamRoles.yml):Resources.EventReaderRole}
    StateMachineListExec: ${file(${self:custom.wtPathPrefix}watchtower/iamRoles.yml):Resources.StateMachineListExec}
    ##
    ## END of Watchtower Resources
    ########################################
  Outputs:
    WTCheckerMachine: ${file(${self:custom.wtPathPrefix}watchtower/outputs.yml):Outputs.WTCheckerMachine}
    WTEventsKinesisStream: ${file(${self:custom.wtPathPrefix}watchtower/outputs.yml):Outputs.WTEventsKinesisStream}
    WTEventsKinesisStreamARN: ${file(${self:custom.wtPathPrefix}watchtower/outputs.yml):Outputs.WTEventsKinesisStreamARN}
