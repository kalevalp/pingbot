service: pingbot

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1

package:
  exclude:
    - README.md
    - LICENSE
    - res/
  environment:
    DYNAMODB_NAMESPACE: ${opt:stage, "dev"}
    WATCHTOWER_EVENT_KINESIS_STREAM:
      Ref: EventsStream
    # DEBUG_WATCHTOWER: 1
    # PROFILE_WATCHTOWER: 1

custom:
  # handlerFilePostfix: '-wrapper'
  handlerFilePostfix: ''
  # handlerFilePostfix: ${env:WT_RUN_NO_RECORDING, '-wrapper'}

plugins:
  - serverless-step-functions

functions:
  PingbotLambdaDispatcher:
    name: pingbot-dispatcher
    handler: src/pingbot-dispatcher${self:custom.handlerFilePostfix}.handler
    description : "Function to fetch check targets from DynamoDB table and invoke the health check function"
    memorySize: 1024
    timeout: 60
    role:
      'Fn::GetAtt': [ PingbotDispatcherLambdaRole, Arn ]
    events:
      - schedule: rate(1 minute)

  PingbotLambdaHealthChecker:
    name: pingbot-health-checker
    handler: src/pingbot-health-checker${self:custom.handlerFilePostfix}.handler
    description : "Function to make an HTTP/HTTPS request and save result to DynamoDB table"
    memorySize: 1024
    timeout: 55
    role:
      'Fn::GetAtt': [ PingbotLambdaRole, Arn ]

  PingbotLambdaResultProcessor:
    name: pingbot-result-processor
    handler: src/pingbot-result-processor${self:custom.handlerFilePostfix}.handler
    description : "Function to handle the check status changes (invokes notifiers, persists status history)"
    memorySize: 1024
    timeout: 50
    role:
      'Fn::GetAtt': [ PingbotStreamLambdaRole, Arn ]
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [PingbotResults, StreamArn]

  PingbotLambdaSlackNotifier:
    name: pingbot-slack-notifier
    handler: src/pingbot-slack-notifier${self:custom.handlerFilePostfix}.handler
    description : "Function to notify the check status changes"
    memorySize: 1024
    timeout: 50
    role:
      'Fn::GetAtt': [ PingbotLambdaRole, Arn ]

  PingbotLambdaAddMonitoredURL:
    name: pingbot-add-url
    handler: src/pingbot-add-url${self:custom.handlerFilePostfix}.handler
    description : "Function to add a URL to be pinged"
    memorySize: 1024
    timeout: 6
    role:
      'Fn::GetAtt': [ PingbotLambdaRole, Arn ]
    events:
      - http:
          path: addurl
          method: post
          cors: true

  PingbotLambdaRemoveMonitoredURL:
    name: pingbot-remove-url
    handler: src/pingbot-remove-url${self:custom.handlerFilePostfix}.handler
    description : "Function to remove a URL to be pinged"
    memorySize: 1024
    timeout: 6
    role:
      'Fn::GetAtt': [ PingbotLambdaRole, Arn ]
    events:
      - http:
          path: removeurl
          method: delete
          cors: true

  ########################################
  ## Watchtower Functions
  ##
  ##   Log Ingestion
  watchtower-ingestion:
    handler: src/watchtower-log-ingestion.handler
    events:
      - stream:
          arn:
            'Fn::GetAtt': [ EventsStream, Arn ]
          type: kinesis
          enabled: true
          startingPosition: TRIM_HORIZON
    role:
      'Fn::GetAtt': [ EventWriterRole, Arn ]
    environment:
      WATCHTOWER_EVENT_TABLE:
        Ref: EventsTable
      WATCHTOWER_INVOCATION_STREAM:
        Ref: InvocationStream
      # WATCHTOWER_PROPERTY_INSTANCE_TABLE:
      #   Ref: InstancesTable
  ##
  ##   Log Checker
  watchtower-monitor:
    handler: src/watchtower-monitor.handler
    # events:
    # - stream:
    #     arn:
    #       'Fn::GetAtt': [ InvocationStream, Arn ]
    #     type: kinesis
    #     enabled: true
    #     startingPosition: TRIM_HORIZON
    environment:
      WATCHTOWER_EVENT_TABLE:
        Ref: EventsTable
      WATCHTOWER_INVOCATION_STREAM:
        Ref: InvocationStream
      # WATCHTOWER_PROPERTY_INSTANCE_TABLE:
      #   Ref: InstancesTable
      WATCHTOWER_CHECKPOINT_TABLE:
        Ref: CheckpointsTable
      PROCESSING_LAMBDA_TIMEOUT: 6
    role:
      'Fn::GetAtt': [ EventReaderRole, Arn ]
  ##
  ##   Monitor state machine trigger
  wt-monitor-trigger:
    handler: src/watchtower-monitor-trigger.handler
    events:
    - stream:
        arn:
          'Fn::GetAtt': [ InvocationStream, Arn ]
        type: kinesis
        enabled: true
        startingPosition: TRIM_HORIZON
    environment:
      WATCHTOWER_CHECKER_SM_ARN: ${self:resources.Outputs.WTCheckerMachine.Value}
    role:
      'Fn::GetAtt': [ StateMachineListExec, Arn ]
  ##
  ## END of Watchtower Functions
  ########################################

  ##########################################
  ## Watchtower Checker State Machine
  ##
stepFunctions:
  stateMachines:
    checker:
      name: wtCheckerMachine
      definition:
        Comment: "Watchtower property checker state machine."
        StartAt: WaitToStable
        States:
          WaitToStable:
            Type : Wait
            SecondsPath : $.stabilityDelay
            Next: StableCheckerRun
          StableCheckerRun:
            Type: Task
            Comment: "Second/Stable execution of the checker."
            Resource:
              Fn::GetAtt: [watchtower-monitor, Arn]
            End: true
  ##
  ## End of Watchtower Checker State Machine
  ##########################################

resources:
  Resources:
    PingbotTargets:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: pingbot-targets
        AttributeDefinitions:
          - AttributeName: uuid
            AttributeType: S
        KeySchema:
          - AttributeName: uuid
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 10
    PingbotResults:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName : pingbot-results
        AttributeDefinitions:
          - AttributeName: uuid
            AttributeType: S
        KeySchema:
          - AttributeName: uuid
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 10
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    PingbotDispatcherLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
          - Effect: "Allow"
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
        Path: /
        # Path: "/pingbot/",
        Policies:
          - PolicyName: LambdaFunctionPolicy
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource:
                    - arn:aws:logs:*:*:*
                - Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: # "*"
                    - Fn::GetAtt: [PingbotLambdaHealthCheckerLambdaFunction, Arn]
                    - Fn::GetAtt: [PingbotLambdaSlackNotifierLambdaFunction, Arn]
                - Effect: Allow
                  Action:
                    - "dynamodb:GetItem"
                    - "dynamodb:PutItem"
                    - "dynamodb:Scan"
                  Resource:
                    - Fn::GetAtt: [PingbotTargets, Arn]
                    - Fn::GetAtt: [PingbotResults, Arn]
                - Effect: Allow
                  Action:
                    - 'kinesis:DescribeStream'
                    - 'kinesis:PutRecord'
                    - 'kinesis:PutRecords'
                  Resource:
                    Fn::GetAtt: [EventsStream, Arn]

    PingbotStreamLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
          - Effect: "Allow"
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
        Path: /
        # Path: "/pingbot/",
        Policies:
          - PolicyName: LambdaFunctionPolicy
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource:
                    - arn:aws:logs:*:*:*
                - Effect: Allow
                  Action:
                    - "dynamodb:GetItem"
                    - "dynamodb:PutItem"
                    - "dynamodb:Scan"
                  Resource:
                    - Fn::GetAtt: [PingbotTargets, Arn]
                    - Fn::GetAtt: [PingbotResults, Arn]
                - Effect: Allow
                  Action:
                    - "dynamodb:DescribeStream"
                    - "dynamodb:GetRecords"
                    - "dynamodb:GetShardIterator"
                    - "dynamodb:ListStreams"
                  Resource:
                    - Fn::GetAtt: [PingbotResults, StreamArn]
                - Effect: Allow
                  Action:
                    - 'kinesis:DescribeStream'
                    - 'kinesis:PutRecord'
                    - 'kinesis:PutRecords'
                  Resource:
                    Fn::GetAtt: [EventsStream, Arn]
    PingbotLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
          - Effect: "Allow"
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
        Path: /
        # Path: "/pingbot/",
        Policies:
          - PolicyName: LambdaFunctionPolicy
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource:
                    - arn:aws:logs:*:*:*
                - Effect: Allow
                  Action:
                    - "dynamodb:GetItem"
                    - "dynamodb:PutItem"
                    - "dynamodb:Scan"
                    - "dynamodb:DeleteItem"
                  Resource:
                    - Fn::GetAtt: [PingbotTargets, Arn]
                    - Fn::GetAtt: [PingbotResults, Arn]
                - Effect: Allow
                  Action:
                    - 'kinesis:DescribeStream'
                    - 'kinesis:PutRecord'
                    - 'kinesis:PutRecords'
                  Resource:
                    Fn::GetAtt: [EventsStream, Arn]

    ########################################
    ## Watchtower Resources
    ##
    ##   Invocation Kinesis Stream
    InvocationStream:
      Type: 'AWS::Kinesis::Stream'
      Properties:
        Name: Watchtower${self:provider.stage}InvocationStream
        ShardCount: 10
    ##
    ##   Events Kinesis Stream
    EventsStream:
      Type: 'AWS::Kinesis::Stream'
      Properties:
        Name: Watchtower${self:provider.stage}EventsStream
        ShardCount: 25
    ##
    ##   Events DynamoDB Table
    EventsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: propinst
          AttributeType: S
        - AttributeName: id
          AttributeType: S
        KeySchema:
        - AttributeName: propinst
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: Watchtower-${self:provider.stage}-MonitoredEvents
        TimeToLiveSpecification:
          AttributeName: expiration
          Enabled: true
    ##
    ##   Instances Checkpoints DynamoDB Table
    CheckpointsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: propinst
          AttributeType: S
        KeySchema:
        - AttributeName: propinst
          KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: Watchtower-${self:provider.stage}-InstanceCheckpoints
    ##
    ##   Event-Writer IAM Role
    EventWriterRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: ${self:provider.stage}EventWriterRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
        ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
        Policies:
          - PolicyName: BatchWriteToEventTable
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              -  Effect: Allow
                 Action:
                 - 'dynamodb:BatchWriteItem'
                 Resource:
                   Fn::GetAtt: [EventsTable, Arn]
    ##
    ## Event-Reader IAM Role
    EventReaderRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: ${self:provider.stage}EventReaderRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
        ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
        Policies:
          - PolicyName: QueryEventTable
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              -  Effect: Allow
                 Action:
                 - 'dynamodb:Query'
                 Resource:
                   Fn::GetAtt: [EventsTable, Arn]
    ##
    ## State Machine Operations Role
    StateMachineListExec:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: ${self:provider.stage}StateMachineListExec
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: sts:AssumeRole
              Principal:
                Service: lambda.amazonaws.com
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AdministratorAccess
        Policies:
          - PolicyName: ListAndExecuteSM
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                -  Effect: Allow
                   Action:
                     - 'state:StartExecution'
                   Resource:
                     ${self:resources.Outputs.WTCheckerMachine.Value}
    ##
    ## END of Watchtower Resources
    ########################################
  Outputs:
    WTCheckerMachine:
      Description: The ARN of the checker state machine
      Value:
        Ref: WtCheckerMachine # Note the capitalized first letter. Name in the step function declaration is wtCheckerMachine. This an AWS weirdness.
