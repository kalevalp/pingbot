service: pingbot

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1

package:
  exclude:
    - docs/**
    - scripts/**
    - README.md
    - LICENSE
    - res/cfn/**
    - res/example/**
    - src/web/**
    - src/bot/README.md

functions:
  hello:
    handler: handler.hello

  PingbotLambdaDispatcher:
    name: pingbot-dispatcher
    handler: src/bot/pingbot-dispatcher.handler
    description : "Function to fetch check targets from DynamoDB table and invoke the health check function"
    memorySize: 1024
    timeout: 60
    role:
      'Fn::GetAtt': [ PingbotDispatcherLambdaRole, Arn ]
    events:
      - schedule: rate(2 hours)

  PingbotLambdaHealthChecker:
    name: pingbot-health-checker
    handler: src/bot/pingbot-health-checker.handler
    description : "Function to make an HTTP/HTTPS request and save result to DynamoDB table"
    memorySize: 1024
    timeout: 55
    role:
      'Fn::GetAtt': [ PingbotLambdaRole, Arn ]

  PingbotLambdaResultProcessor:
    name: pingbot-result-processor
    handler: src/bot/pingbot-result-processor.handler
    description : "Function to handle the check status changes (invokes notifiers, persists status history)"
    memorySize: 1024
    timeout: 50
    role:
      'Fn::GetAtt': [ PingbotStreamLambdaRole, Arn ]
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [PingbotResults, StreamArn]

  PingbotLambdaSlackNotifier:
    name: pingbot-slack-notifier
    handler: src/bot/pingbot-slack-notifier.handler
    description : "Function to notify the check status changes"
    memorySize: 1024
    timeout: 50
    role:
      'Fn::GetAtt': [ PingbotLambdaRole, Arn ]


  PingbotLambdaCognitoDeployer:
    name: pingbot-cognito-deployer
    handler: res/lambda/pingbot-cognito-deployer.handler
    description : "Function to create Cognito identity pool, a handler of CloudFormation Custom Resource."
    MemorySize: 1024
    role:
      'Fn::GetAtt': [ CognitoDeployerLambdaExecutionRole, Arn ]
    Timeout: 30

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

resources:
  Resources:
    PingbotTargets:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: pingbot-targets
        AttributeDefinitions:
          - AttributeName: uuid
            AttributeType: S
        KeySchema:
          - AttributeName: uuid
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 10
    PingbotResults:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName : pingbot-results
        AttributeDefinitions:
          - AttributeName: uuid
            AttributeType: S
        KeySchema:
          - AttributeName: uuid
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 10
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    PingbotDispatcherLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
          - Effect: "Allow"
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
        Path: /
        # Path: "/pingbot/",
        Policies:
          - PolicyName: LambdaFunctionPolicy
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource:
                    - arn:aws:logs:*:*:*
                - Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: # "*"
                    - Fn::GetAtt: [PingbotLambdaHealthCheckerLambdaFunction, Arn]
                    - Fn::GetAtt: [PingbotLambdaSlackNotifierLambdaFunction, Arn]
                - Effect: Allow
                  Action:
                    - "dynamodb:GetItem"
                    - "dynamodb:PutItem"
                    - "dynamodb:Scan"
                  Resource:
                    - Fn::GetAtt: [PingbotTargets, Arn]
                    - Fn::GetAtt: [PingbotResults, Arn]

    PingbotStreamLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
          - Effect: "Allow"
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
        Path: /
        # Path: "/pingbot/",
        Policies:
          - PolicyName: LambdaFunctionPolicy
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource:
                    - arn:aws:logs:*:*:*
                - Effect: Allow
                  Action:
                    - "dynamodb:GetItem"
                    - "dynamodb:PutItem"
                    - "dynamodb:Scan"
                  Resource:
                    - Fn::GetAtt: [PingbotTargets, Arn]
                    - Fn::GetAtt: [PingbotResults, Arn]
                - Effect: Allow
                  Action:
                    - "dynamodb:DescribeStream"
                    - "dynamodb:GetRecords"
                    - "dynamodb:GetShardIterator"
                    - "dynamodb:ListStreams"
                  Resource:
                    - Fn::GetAtt: [PingbotResults, StreamArn]
    PingbotLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
          - Effect: "Allow"
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
        Path: /
        # Path: "/pingbot/",
        Policies:
          - PolicyName: LambdaFunctionPolicy
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource:
                    - arn:aws:logs:*:*:*
                - Effect: Allow
                  Action:
                    - "dynamodb:GetItem"
                    - "dynamodb:PutItem"
                    - "dynamodb:Scan"
                  Resource:
                    - Fn::GetAtt: [PingbotTargets, Arn]
                    - Fn::GetAtt: [PingbotResults, Arn]
    CognitoDeployerLambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
        # "Path": "/pingbot/",
        Path: /
        Policies:
          - PolicyName: DeployerLambdaFunctionPolicy
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource: "arn:aws:logs:*:*:*"
                - Effect: Allow
                  Action:
                    - "cognito-identity:CreateIdentityPool"
                    - "cognito-identity:DeleteIdentityPool"
                    - "cognito-identity:UpdateIdentityPool"
                    - "cognito-identity:SetIdentityPoolRoles"
                    - "iam:PassRole"
                  Resource: "*"
    # CognitoIdentityPool:
    #   Type: Custom::CognitoIdentityPool
    #   Properties:
    #     "ServiceToken": { "Fn::GetAtt": ["Lambda", "Arn"] },
    #     "Options": {
    #       "AllowUnauthenticatedIdentities": { "Ref": "AllowUnauthenticatedIdentities" },
    #       "IdentityPoolName": { "Ref": "IdentityPoolName" },
    #       "CognitoIdentityProviders": { "Fn::If": ["EMPTY_CognitoIdentityProviders", { "Ref": "AWS::NoValue" }, { "Ref": "CognitoIdentityProviders" }] },
    #       "DeveloperProviderName": { "Fn::If": ["EMPTY_DeveloperProviderName", { "Ref": "AWS::NoValue" }, { "Ref": "DeveloperProviderName" }] },
    #       "OpenIdConnectProviderARNs": { "Fn::If": ["EMPTY_OpenIdConnectProviderARNs", { "Ref": "AWS::NoValue" }, { "Ref": "OpenIdConnectProviderARNs" }] },
    #       "SamlProviderARNs": { "Fn::If": [ "EMPTY_SamlProviderARNs", { "Ref": "AWS::NoValue" }, { "Ref": "SamlProviderARNs" }] },
    #       "SupportedLoginProviders": { "Fn::If": ["EMPTY_SupportedLoginProviders", { "Ref": "AWS::NoValue" }, { "Ref": "SupportedLoginProviders" }]}
    #     }
    #   }
    # },
    # "CognitoAuthenticatedRole": {
    #   "Type": "AWS::IAM::Role",
    #   "Properties": {
    #     "AssumeRolePolicyDocument": {
    #       "Statement": [
    #         {
    #           "Effect": "Allow",
    #           "Principal": {
    #             "Federated": "cognito-identity.amazonaws.com"
    #           },
    #           "Action": "sts:AssumeRoleWithWebIdentity",
    #           "Condition": {
    #             "StringEquals": {
    #               "cognito-identity.amazonaws.com:aud": { "Fn::GetAtt": ["CognitoIdentityPool", "IdentityPoolId"] }
    #             },
    #             "ForAnyValue:StringLike": {
    #               "cognito-identity.amazonaws.com:amr": "authenticated"
    #             }
    #           }
    #         }
    #       ]
    #     }
    #   }
    # },
    # "CognitoUnauthenticatedRole": {
    #   "Type": "AWS::IAM::Role",
    #   "Condition": "UseUnauthenticatedIdentities",
    #   "Properties": {
    #     "AssumeRolePolicyDocument": {
    #       "Statement": [
    #         {
    #           "Effect": "Allow",
    #           "Principal": {
    #             "Federated": "cognito-identity.amazonaws.com"
    #           },
    #           "Action": "sts:AssumeRoleWithWebIdentity",
    #           "Condition": {
    #             "StringEquals": {
    #               "cognito-identity.amazonaws.com:aud": { "Fn::GetAtt": ["CognitoIdentityPool", "IdentityPoolId"] }
    #             },
    #             "ForAnyValue:StringLike": {
    #               "cognito-identity.amazonaws.com:amr": "unauthenticated"
    #             }
    #           }
    #         }
    #       ]
    #     },
    #     "Path": "/pingbot/",
    #     "Policies": [
    #       {
    #         "PolicyName": "CognitoUnAuthenticatedPolicy",
    #         "PolicyDocument": {
    #           "Statement": [
    #             {
    #               "Sid": "CognitoAuthPermission",
    #               "Effect": "Allow",
    #               "Action": [
    #                 "mobileanalytics:PutEvents",
    #                 "cognito-sync:*"
    #               ],
    #               "Resource": [
    #                 "*"
    #               ]
    #             },
    #             {
    #               "Effect": "Allow",
    #               "Action": [
    #                 "dynamodb:DeleteItem",
    #                 "dynamodb:GetItem",
    #                 "dynamodb:PutItem",
    #                 "dynamodb:Scan"
    #               ],
    #               "Resource": [
    #                 { "Fn::Join": [":", ["arn:aws:dynamodb", { "Ref": "AWS::Region" }, { "Ref": "AWS::AccountId" }, "table/pingbot-*"]] }
    #               ]
    #             }
    #           ]
    #         }
    #       }
    #     ]
    #   }
    # },
    # "CognitoIdentityPoolRoles": {
    #   "Type": "Custom::CognitoIdentityPoolRoles",
    #   "Properties": {
    #     "ServiceToken": { "Fn::GetAtt": ["Lambda", "Arn"] },
    #     "Options": {
    #       "IdentityPoolId": { "Fn::GetAtt": ["CognitoIdentityPool", "IdentityPoolId"] },
    #       "Roles": {
    #         "authenticated": { "Fn::GetAtt": ["CognitoAuthenticatedRole", "Arn"] },
    #         "unauthenticated": { "Fn::If": ["UseUnauthenticatedIdentities", { "Fn::GetAtt": ["CognitoUnauthenticatedRole", "Arn"] }, { "Ref": "AWS::NoValue" }] }
    #       }
    #     }
    #   }
    # }
